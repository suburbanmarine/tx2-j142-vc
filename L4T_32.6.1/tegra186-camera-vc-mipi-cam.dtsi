/*
 * Copyright (c) 2015-2016, NVIDIA CORPORATION.  All rights reserved.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

//#define PIXEL_TYPE      1   /* CCC - pixel type : 0=Y10 (gray), 1=RG10 (color) */
//#define NUM_LANES       2   /* CCC - number of lanes: 2 or 4 */
//#define EXT_TRIG_MODE  "1"  /* CCC - imx183.dtsi - external trigger mode: 0=off, 1=ext.trigger, 4=ext.trig test */

// #include <dt-bindings/media/camera.h>
// #include <dt-bindings/platform/t210/t210.h>


#include "dt-bindings/clock/tegra186-clock.h"
#define CAM0_RST_L  TEGRA_MAIN_GPIO(R, 5)
#define CAM0_PWDN   TEGRA_MAIN_GPIO(R, 0)

#define COLOR_SENSOR   1                /* CCC - color sensor: 0=no, 1=yes */
#if COLOR_SENSOR
  #define PIXEL_TYPE_08  "bayer_rggb8"  /* 8-bit color pixel type  : V4L2_PIX_FMT_SRGGB8  'RGGB'  */
  #define PIXEL_TYPE_10  "bayer_rggb"   /* 10-bit color pixel type : V4L2_PIX_FMT_SRGGB10 'RG10'  */
  #define PIXEL_TYPE_12  "bayer_rggb12" /* 12-bit color pixel type : V4L2_PIX_FMT_SRGGB12 'RG12'  */
#else
  #define PIXEL_TYPE_08  "gray"         /* 8-bit grayscale pixel type  : V4L2_PIX_FMT_GREY 'GREY' */
  #define PIXEL_TYPE_10  "y10"          /* 10-bit grayscale pixel type : V4L2_PIX_FMT_Y10  'Y10 ' */
  #define PIXEL_TYPE_12  "y12"          /* 12-bit grayscale pixel type : V4L2_PIX_FMT_Y12  'Y12 ' */
#endif

#define BUS_WIDTH     2              /* CCC - bus width: 1, 2 or 4 */
#define INT_NUM_LANES 2             
#define NUM_LANES     "2" /* CCC - number of lanes (== bus width): 1, 2 or 4 */
#define FLASH_OUTPUT  "1"           /* CCC - flash output enable: "0"=off, "1"=on */
#define PIX_CLK_HZ    "801907200"   // "800000000"

#define ACTIVE_W          "5440"
#define ACTIVE_H          "3648"    // rev < 9: "3690"
#define LINE_LENGTH       "6000"

#define CROP_DX           "5440"
#define CROP_DY           "1280"

#define MIN_GAIN_VAL      "0"
#define MAX_GAIN_VAL      "1957"
#define DEFAULT_GAIN      "16"

#define MIN_EXP_TIME      "160"
#define MAX_EXP_TIME      "10000000"
#define DEFAULT_EXP_TIME  "10000"

#define MIN_FRAMERATE     "1"
#define MAX_FRAMERATE     "20"
#define DEFAULT_FRAMERATE "20"

#define EMBEDDED_METADATA_HEIGHT "0"
#define VC_MIPI_METADATA_H  "0"





/*
I2C Busses:

aliases:
i2c0 = "/i2c@3160000";
i2c1 = "/i2c@c240000";
i2c2 = "/i2c@3180000";
i2c3 = "/i2c@3190000";
i2c4 = "/i2c@31a0000";
i2c5 = "/i2c@31b0000";
i2c6 = "/i2c@31c0000";
i2c7 = "/i2c@c250000";
i2c8 = "/i2c@31e0000";
*/

/ {

    gpio@2200000 {
        camera-control-output-low {
            status = "okay";
            gpio-hog;
            output-low;
            gpios = <CAM0_RST_L 0 CAM0_PWDN 0>;
            label = "cam0-rst", "cam0-pwdn";
        };
    };

    host1x {
        vi@15700000 {
            status = "okay";
            num-channels = <6>;
            ports {
                #address-cells = <1>;
                #size-cells = <0>;
                port@0 {
                    reg = <0>;
                    status = "okay";
                    vc_mipi_vi_in0: endpoint {
                        port-index = <0>;         // CSI-C ?? CSI-2
                        bus-width = <INT_NUM_LANES>;
                        remote-endpoint = <&vc_mipi_csi_out0>;
                    };
                };
                port@1 {
                    reg = <1>;
                    status = "okay";
                    vc_mipi_vi_in1: endpoint {
                        port-index = <2>;         // CSI-C ?? CSI-2
                        bus-width = <INT_NUM_LANES>;
                        remote-endpoint = <&vc_mipi_csi_out1>;
                    };
                };
                port@2 {
                    reg = <2>;
                    status = "okay";
                    vc_mipi_vi_in2: endpoint {
                        port-index = <4>;         // CSI-C ?? CSI-2
                        bus-width = <INT_NUM_LANES>;
                        remote-endpoint = <&vc_mipi_csi_out2>;
                    };
                };
            };
        };

        nvcsi@150c0000 {
            num-channels = <3>;
            #address-cells = <1>;
            #size-cells = <0>;
            status = "okay";
            channel@0 {
                reg = <0>;
                ports {
                    #address-cells = <1>;
                    #size-cells = <0>;
                    port@0 {
                        reg = <0>;
                        vc_mipi_csi_in0: endpoint@0 {
                            status = "okay";
                            port-index = <0>;
                            bus-width = <INT_NUM_LANES>;
                            remote-endpoint = <&vc_mipi_out0>;
                        };
                    };
                    port@1 {
                        reg = <1>;
                        vc_mipi_csi_out0: endpoint@1 {
                            status = "okay";
                            remote-endpoint = <&vc_mipi_vi_in0>;
                        };
                    };
                };
            };
            channel@1 {
                reg = <1>;
                ports {
                    #address-cells = <1>;
                    #size-cells = <0>;
                    port@0 {
                        reg = <0>;
                        vc_mipi_csi_in1: endpoint@2 {
                            status = "okay";
                            port-index = <2>;
                            bus-width = <INT_NUM_LANES>;
                            remote-endpoint = <&vc_mipi_out1>;
                        };
                    };
                    port@1 {
                        reg = <1>;
                        vc_mipi_csi_out1: endpoint@3 {
                            status = "okay";
                            remote-endpoint = <&vc_mipi_vi_in1>;
                        };
                    };
                };
            };
            channel@2 {
                reg = <2>;
                ports {
                    #address-cells = <1>;
                    #size-cells = <0>;
                    port@0 {
                        reg = <0>;
                        vc_mipi_csi_in2: endpoint@4 {
                            status = "okay";
                            port-index = <4>;
                            bus-width = <INT_NUM_LANES>;
                            remote-endpoint = <&vc_mipi_out2>;
                        };
                    };
                    port@1 {
                        reg = <1>;
                        vc_mipi_csi_out2: endpoint@5 {
                            status = "okay";
                            remote-endpoint = <&vc_mipi_vi_in2>;
                        };
                    };
                };
            };
        };
    };

    i2c@3160000 {
        status = "okay";
//        #address-cells = <1>;
//        #size-cells = <0>;

        vc_mipi_c@1a {
            compatible = "nvidia,vc_mipi";
            status = "okay";

            reg = <0x1a>;           /* I2C device address */
            devnode = "video0";     /* V4L2 device node location */

            /* Define any required hw resources needed by driver */
            /* ie. clocks, io pins, power sources */
            /* mclk-index indicates the index of the */
            /* mclk-name with in the clock-names array */

            clocks = <&tegra_car TEGRA186_CLK_EXTPERIPH1>,
                     <&tegra_car TEGRA186_CLK_PLLP_OUT0>;
            clock-names = "extperiph1", "pllp_grtba";
            clock-frequency = <24000000>;
            mclk = "extperiph1";
            reset-gpios = <&tegra_main_gpio CAM0_RST_L GPIO_ACTIVE_HIGH>;
            pwdn-gpios = <&tegra_main_gpio CAM0_PWDN GPIO_ACTIVE_HIGH>;
            vana-supply = <&en_vdd_cam_hv_2v8>;
            vif-supply = <&en_vdd_cam>;


            /* Physical dimensions of sensor */
            physical_w = "3.674";
            physical_h = "2.738";
            sensor_model ="vc_mipi";

            /* Sensor output flip settings */
            vertical-flip = "true";
            flash-output = "1";

            // '0: disabled', '1: external', '2: pulsewidth', '3: self', '4: single', '5: sync', '6: stream_edge', '7: stream_level
            trigger_mode            = "0";
            //  '0: disabled', '1: flash active high', '2: flash active low', '3: trigger active low', '4: trigger active low and flash active high', '5: trigger and flash active low'
            io_mode                 = "0";

            mode0 {
                num_lanes                = NUM_LANES;
                tegra_sinterface         = "serial_a";
                embedded_metadata_height = VC_MIPI_METADATA_H;
                readout_orientation      = "0";

                // ----------------------------------------------------
                // If you want to use GStreamer with nvarguscamerasrc
                // you have to adjust this settings. 
                active_l                 = "0";
                active_t                 = "0";
                active_w                 = "5440";
                active_h                 = "3648";
                pixel_t                  = "bayer_rggb12";

                min_gain_val             = "0";         // mdB
                max_gain_val             = "27000";     // mdB
                step_gain_val            = "26";        // mdB
                default_gain             = "0";         // mdB

                min_exp_time             = "1";         // us
                max_exp_time             = "1000000";   // us
                step_exp_time            = "1";         // us
                default_exp_time         = "10000";     // us

                min_framerate            = "0";         // mHz
                max_framerate            = "11200";     // mHz
                step_framerate           = "100";       // mHz
                default_framerate        = "11200";     // mHz
                // ----------------------------------------------------

                gain_factor              = "1000";
                exposure_factor          = "1000000";
                framerate_factor         = "1000";
                inherent_gain            = "1";
                min_hdr_ratio            = "1";
                max_hdr_ratio            = "1";

                line_length              = "0";
                phy_mode                 = "DPHY";
                discontinuous_clk        = "no";
                mclk_khz                 = "24000";
                pix_clk_hz               = "800000000";
                mclk_multiplier          = "9.33";
                cil_settletime           = "0";
                dpcm_enable              = "false";           
            };


            ports {
                #address-cells = <1>;
                #size-cells = <0>;

                port@0 {
                    reg = <0>;
                    vc_mipi_out0: endpoint {
                        port-index = <0>;
                        bus-width = <INT_NUM_LANES>;
                        remote-endpoint = <&vc_mipi_csi_in0>;
                    };
                };
            };
        };

    };


    i2c@3180000 {
        status = "okay";
//        #address-cells = <1>;
//        #size-cells = <0>;

        vc_mipi_c@1a {
            compatible = "nvidia,vc_mipi";
            status = "okay";

            reg = <0x1a>;           /* I2C device address */
            devnode = "video1";     /* V4L2 device node location */

            /* Define any required hw resources needed by driver */
            /* ie. clocks, io pins, power sources */
            /* mclk-index indicates the index of the */
            /* mclk-name with in the clock-names array */

            clocks = <&tegra_car TEGRA186_CLK_EXTPERIPH1>,
                     <&tegra_car TEGRA186_CLK_PLLP_OUT0>;
            clock-names = "extperiph1", "pllp_grtba";
            clock-frequency = <24000000>;
            mclk = "extperiph1";
            reset-gpios = <&tegra_main_gpio CAM0_RST_L GPIO_ACTIVE_HIGH>;
            pwdn-gpios = <&tegra_main_gpio CAM0_PWDN GPIO_ACTIVE_HIGH>;
            vana-supply = <&en_vdd_cam_hv_2v8>;
            vif-supply = <&en_vdd_cam>;
//            vdig-supply = <&en_vdd_cam_1v2>;        // digital 1.2v

//            avdd-reg = "vana";
//            iovdd-reg = "vif";
//            dvdd-reg = "vdig";

            /* Physical dimensions of sensor */
            physical_w = "3.674";
            physical_h = "2.738";
            sensor_model ="vc_mipi";

            /* Sensor output flip settings */
            vertical-flip = "true";
            flash-output = "1";

            // '0: disabled', '1: external', '2: pulsewidth', '3: self', '4: single', '5: sync', '6: stream_edge', '7: stream_level
            trigger_mode            = "0";
            //  '0: disabled', '1: flash active high', '2: flash active low', '3: trigger active low', '4: trigger active low and flash active high', '5: trigger and flash active low'
            io_mode                 = "0";

            mode0 {
                num_lanes                = NUM_LANES;
                tegra_sinterface         = "serial_c";
                embedded_metadata_height = VC_MIPI_METADATA_H;
                readout_orientation      = "0";

                // ----------------------------------------------------
                // If you want to use GStreamer with nvarguscamerasrc
                // you have to adjust this settings. 
                active_l                 = "0";
                active_t                 = "0";
                active_w                 = "5440";
                active_h                 = "3648";
                pixel_t                  = "bayer_rggb12";

                min_gain_val             = "0";         // mdB
                max_gain_val             = "27000";     // mdB
                step_gain_val            = "26";        // mdB
                default_gain             = "0";         // mdB

                min_exp_time             = "1";         // us
                max_exp_time             = "1000000";   // us
                step_exp_time            = "1";         // us
                default_exp_time         = "10000";     // us

                min_framerate            = "0";         // mHz
                max_framerate            = "11200";     // mHz
                step_framerate           = "100";       // mHz
                default_framerate        = "11200";     // mHz
                // ----------------------------------------------------

                gain_factor              = "1000";
                exposure_factor          = "1000000";
                framerate_factor         = "1000";
                inherent_gain            = "1";
                min_hdr_ratio            = "1";
                max_hdr_ratio            = "1";

                line_length              = "0";
                phy_mode                 = "DPHY";
                discontinuous_clk        = "no";
                mclk_khz                 = "24000";
                pix_clk_hz               = "800000000";
                mclk_multiplier          = "9.33";
                cil_settletime           = "0";
                dpcm_enable              = "false";           
            };

            ports {
                #address-cells = <1>;
                #size-cells = <0>;

                port@0 {
                    reg = <0>;
                    vc_mipi_out1: endpoint {
                        port-index = <0>;
                        bus-width = <INT_NUM_LANES>;
                        remote-endpoint = <&vc_mipi_csi_in1>;
                    };
                };
            };
        };

    };



    i2c@c250000 {
        status = "okay";
//        #address-cells = <1>;
//        #size-cells = <0>;

        vc_mipi_c@1a {
            compatible = "nvidia,vc_mipi";
            status = "okay";

            reg = <0x1a>;           /* I2C device address */
            devnode = "video2";     /* V4L2 device node location */

            /* Define any required hw resources needed by driver */
            /* ie. clocks, io pins, power sources */
            /* mclk-index indicates the index of the */
            /* mclk-name with in the clock-names array */

            clocks = <&tegra_car TEGRA186_CLK_EXTPERIPH1>,
                     <&tegra_car TEGRA186_CLK_PLLP_OUT0>;
            clock-names = "extperiph1", "pllp_grtba";
            clock-frequency = <24000000>;
            mclk = "extperiph1";
            reset-gpios = <&tegra_main_gpio CAM0_RST_L GPIO_ACTIVE_HIGH>;
            pwdn-gpios = <&tegra_main_gpio CAM0_PWDN GPIO_ACTIVE_HIGH>;
            vana-supply = <&en_vdd_cam_hv_2v8>;
            vif-supply = <&en_vdd_cam>;
//            vdig-supply = <&en_vdd_cam_1v2>;        // digital 1.2v

//            avdd-reg = "vana";
//            iovdd-reg = "vif";
//            dvdd-reg = "vdig";

            /* Physical dimensions of sensor */
            physical_w = "3.674";
            physical_h = "2.738";
            sensor_model ="vc_mipi";

            /* Sensor output flip settings */
            vertical-flip = "true";
            flash-output = "1";

            // '0: disabled', '1: external', '2: pulsewidth', '3: self', '4: single', '5: sync', '6: stream_edge', '7: stream_level
            trigger_mode            = "0";
            //  '0: disabled', '1: flash active high', '2: flash active low', '3: trigger active low', '4: trigger active low and flash active high', '5: trigger and flash active low'
            io_mode                 = "0";

            mode0 {
                num_lanes                = NUM_LANES;
                tegra_sinterface         = "serial_e";
                embedded_metadata_height = VC_MIPI_METADATA_H;
                readout_orientation      = "0";

                // ----------------------------------------------------
                // If you want to use GStreamer with nvarguscamerasrc
                // you have to adjust this settings. 
                active_l                 = "0";
                active_t                 = "0";
                active_w                 = "5440";
                active_h                 = "3648";
                pixel_t                  = "bayer_rggb12";

                min_gain_val             = "0";         // mdB
                max_gain_val             = "27000";     // mdB
                step_gain_val            = "26";        // mdB
                default_gain             = "0";         // mdB

                min_exp_time             = "1";         // us
                max_exp_time             = "1000000";   // us
                step_exp_time            = "1";         // us
                default_exp_time         = "10000";     // us

                min_framerate            = "0";         // mHz
                max_framerate            = "11200";     // mHz
                step_framerate           = "100";       // mHz
                default_framerate        = "11200";     // mHz
                // ----------------------------------------------------

                gain_factor              = "1000";
                exposure_factor          = "1000000";
                framerate_factor         = "1000";
                inherent_gain            = "1";
                min_hdr_ratio            = "1";
                max_hdr_ratio            = "1";

                line_length              = "0";
                phy_mode                 = "DPHY";
                discontinuous_clk        = "no";
                mclk_khz                 = "24000";
                pix_clk_hz               = "800000000";
                mclk_multiplier          = "9.33";
                cil_settletime           = "0";
                dpcm_enable              = "false";           
            };

            ports {
                #address-cells = <1>;
                #size-cells = <0>;

                port@0 {
                    reg = <0>;
                    vc_mipi_out2: endpoint {
                        port-index = <4>;
                        bus-width = <INT_NUM_LANES>;
                        remote-endpoint = <&vc_mipi_csi_in2>;
                    };
                };
            };
        };


    };

    tegra-camera-platform {
        compatible = "nvidia, tegra-camera-platform";
        /**
        * Physical settings to calculate max ISO BW
        *
        * num_csi_lanes = <>;
        * Total number of CSI lanes when all cameras are active
        *
        * max_lane_speed = <>;
        * Max lane speed in Kbit/s
        *
        * min_bits_per_pixel = <>;
        * Min bits per pixel
        *
        * vi_peak_byte_per_pixel = <>;
        * Max byte per pixel for the VI ISO case
        *
        * vi_bw_margin_pct = <>;
        * Vi bandwidth margin in percentage
        *
        * max_pixel_rate = <>;
        * Max pixel rate in Kpixel/s for the ISP ISO case
        *
        * isp_peak_byte_per_pixel = <>;
        * Max byte per pixel for the ISP ISO case
        *
        * isp_bw_margin_pct = <>;
        * Isp bandwidth margin in percentage
        */
        num_csi_lanes = <4>;
        max_lane_speed = <1500000>;
//        min_bits_per_pixel = <10>;
        min_bits_per_pixel = <8>;
        vi_peak_byte_per_pixel = <2>;
        vi_bw_margin_pct = <25>;
        max_pixel_rate = <750000>;
        isp_peak_byte_per_pixel = <2>;
        isp_bw_margin_pct = <25>;

//        tpg_max_iso = <0x3bc400>;

        /**
        * The general guideline for naming badge_info contains 3 parts, and is as follows,
        * The first part is the camera_board_id for the module; if the module is in a FFD
        * platform, then use the platform name for this part.
        * The second part contains the position of the module, ex. "rear" or "front".
        * The third part contains the last 6 characters of a part number which is found
        * in the module's specsheet from the vender.
        */
        modules {
            module0 {
                status = "okay";
                badge = "vc_mipi_front_P5V27C";
                position = "rear";
                orientation = "1";
                drivernode0 {
                    status = "okay";
                    pcl_id = "v4l2_sensor";     /* Declare PCL support driver (classically known as guid)  */
                    devname = "vc_mipi 2-001a";  /* Driver v4l2 device name */
                    /* Declare the device-tree hierarchy to driver instance */
                    proc-device-tree = "/proc/device-tree/i2c@3160000/vc_mipi_c@1a";
                };
            };
        };
    };
};
